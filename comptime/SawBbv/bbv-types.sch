;; ==========================================================
;; Class accessors
;; Bigloo (4.6a)
;; Inria -- Sophia Antipolis     Thu Jun 27 03:28:46 PM CEST 2024 
;; (bigloo -classgen SawBbv/bbv-types.scm)
;; ==========================================================

;; The directives
(directives

;; rtl_ins/bbv
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-rtl_ins/bbv::rtl_ins/bbv loc1264::obj %spill1265::pair-nil dest1266::obj fun1267::rtl_fun args1268::pair-nil def1269::obj out1270::obj in1271::obj ctx1272::bbv-ctx %hash1273::obj)
    (inline rtl_ins/bbv?::bool ::obj)
    (rtl_ins/bbv-nil::rtl_ins/bbv)
    (inline rtl_ins/bbv-%hash::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-%hash-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-ctx::bbv-ctx ::rtl_ins/bbv)
    (inline rtl_ins/bbv-ctx-set! ::rtl_ins/bbv ::bbv-ctx)
    (inline rtl_ins/bbv-in::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-in-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-out::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-out-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-def::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-def-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-args::pair-nil ::rtl_ins/bbv)
    (inline rtl_ins/bbv-args-set! ::rtl_ins/bbv ::pair-nil)
    (inline rtl_ins/bbv-fun::rtl_fun ::rtl_ins/bbv)
    (inline rtl_ins/bbv-fun-set! ::rtl_ins/bbv ::rtl_fun)
    (inline rtl_ins/bbv-dest::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-dest-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-%spill::pair-nil ::rtl_ins/bbv)
    (inline rtl_ins/bbv-%spill-set! ::rtl_ins/bbv ::pair-nil)
    (inline rtl_ins/bbv-loc::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-loc-set! ::rtl_ins/bbv ::obj))))

;; blockV
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-blockV::blockV label1255::int preds1256::pair-nil succs1257::pair-nil first1258::pair-nil versions1259::pair-nil generic1260::obj %mark1261::long merge1262::obj)
    (inline blockV?::bool ::obj)
    (blockV-nil::blockV)
    (inline blockV-merge::obj ::blockV)
    (inline blockV-merge-set! ::blockV ::obj)
    (inline blockV-%mark::long ::blockV)
    (inline blockV-%mark-set! ::blockV ::long)
    (inline blockV-generic::obj ::blockV)
    (inline blockV-generic-set! ::blockV ::obj)
    (inline blockV-versions::pair-nil ::blockV)
    (inline blockV-versions-set! ::blockV ::pair-nil)
    (inline blockV-first::pair-nil ::blockV)
    (inline blockV-first-set! ::blockV ::pair-nil)
    (inline blockV-succs::pair-nil ::blockV)
    (inline blockV-succs-set! ::blockV ::pair-nil)
    (inline blockV-preds::pair-nil ::blockV)
    (inline blockV-preds-set! ::blockV ::pair-nil)
    (inline blockV-label::int ::blockV)
    (inline blockV-label-set! ::blockV ::int))))

;; blockS
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-blockS::blockS label1239::int preds1240::pair-nil succs1241::pair-nil first1242::pair-nil %mark1243::long %hash1244::obj %blacklist1245::obj ctx1246::bbv-ctx parent1247::blockV gccnt1248::long gcmark1249::long mblock1250::obj creator1251::obj merges1252::pair-nil asleep1253::bool)
    (inline blockS?::bool ::obj)
    (blockS-nil::blockS)
    (inline blockS-asleep::bool ::blockS)
    (inline blockS-asleep-set! ::blockS ::bool)
    (inline blockS-merges::pair-nil ::blockS)
    (inline blockS-merges-set! ::blockS ::pair-nil)
    (inline blockS-creator::obj ::blockS)
    (inline blockS-mblock::obj ::blockS)
    (inline blockS-mblock-set! ::blockS ::obj)
    (inline blockS-gcmark::long ::blockS)
    (inline blockS-gcmark-set! ::blockS ::long)
    (inline blockS-gccnt::long ::blockS)
    (inline blockS-gccnt-set! ::blockS ::long)
    (inline blockS-parent::blockV ::blockS)
    (inline blockS-ctx::bbv-ctx ::blockS)
    (inline blockS-%blacklist::obj ::blockS)
    (inline blockS-%blacklist-set! ::blockS ::obj)
    (inline blockS-%hash::obj ::blockS)
    (inline blockS-%hash-set! ::blockS ::obj)
    (inline blockS-%mark::long ::blockS)
    (inline blockS-%mark-set! ::blockS ::long)
    (inline blockS-first::pair-nil ::blockS)
    (inline blockS-first-set! ::blockS ::pair-nil)
    (inline blockS-succs::pair-nil ::blockS)
    (inline blockS-succs-set! ::blockS ::pair-nil)
    (inline blockS-preds::pair-nil ::blockS)
    (inline blockS-preds-set! ::blockS ::pair-nil)
    (inline blockS-label::int ::blockS)
    (inline blockS-label-set! ::blockS ::int))))

;; bbv-queue
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-bbv-queue::bbv-queue blocks1236::pair-nil last1237::pair-nil)
    (inline bbv-queue?::bool ::obj)
    (bbv-queue-nil::bbv-queue)
    (inline bbv-queue-last::pair-nil ::bbv-queue)
    (inline bbv-queue-last-set! ::bbv-queue ::pair-nil)
    (inline bbv-queue-blocks::pair-nil ::bbv-queue)
    (inline bbv-queue-blocks-set! ::bbv-queue ::pair-nil))))

;; bbv-ctx
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-bbv-ctx::bbv-ctx id1233::long entries1234::pair-nil)
    (inline bbv-ctx?::bool ::obj)
    (bbv-ctx-nil::bbv-ctx)
    (inline bbv-ctx-entries::pair-nil ::bbv-ctx)
    (inline bbv-ctx-entries-set! ::bbv-ctx ::pair-nil)
    (inline bbv-ctx-id::long ::bbv-ctx)
    (inline bbv-ctx-id-set! ::bbv-ctx ::long))))

;; bbv-ctxentry
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-bbv-ctxentry::bbv-ctxentry reg1225::rtl_reg types1226::pair polarity1227::bool count1228::long value1229::obj aliases1230::pair-nil initval1231::obj)
    (inline bbv-ctxentry?::bool ::obj)
    (bbv-ctxentry-nil::bbv-ctxentry)
    (inline bbv-ctxentry-initval::obj ::bbv-ctxentry)
    (inline bbv-ctxentry-initval-set! ::bbv-ctxentry ::obj)
    (inline bbv-ctxentry-aliases::pair-nil ::bbv-ctxentry)
    (inline bbv-ctxentry-aliases-set! ::bbv-ctxentry ::pair-nil)
    (inline bbv-ctxentry-value::obj ::bbv-ctxentry)
    (inline bbv-ctxentry-count::long ::bbv-ctxentry)
    (inline bbv-ctxentry-count-set! ::bbv-ctxentry ::long)
    (inline bbv-ctxentry-polarity::bool ::bbv-ctxentry)
    (inline bbv-ctxentry-types::pair ::bbv-ctxentry)
    (inline bbv-ctxentry-reg::rtl_reg ::bbv-ctxentry)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; rtl_ins/bbv
(define-inline (make-rtl_ins/bbv::rtl_ins/bbv loc1264::obj %spill1265::pair-nil dest1266::obj fun1267::rtl_fun args1268::pair-nil def1269::obj out1270::obj in1271::obj ctx1272::bbv-ctx %hash1273::obj) (instantiate::rtl_ins/bbv (loc loc1264) (%spill %spill1265) (dest dest1266) (fun fun1267) (args args1268) (def def1269) (out out1270) (in in1271) (ctx ctx1272) (%hash %hash1273)))
(define-inline (rtl_ins/bbv?::bool obj::obj) ((@ isa? __object) obj (@ rtl_ins/bbv saw_bbv-types)))
(define (rtl_ins/bbv-nil::rtl_ins/bbv) (class-nil (@ rtl_ins/bbv saw_bbv-types)))
(define-inline (rtl_ins/bbv-%hash::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o %hash))
(define-inline (rtl_ins/bbv-%hash-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o %hash) v))
(define-inline (rtl_ins/bbv-ctx::bbv-ctx o::rtl_ins/bbv) (-> |#!bigloo_wallow| o ctx))
(define-inline (rtl_ins/bbv-ctx-set! o::rtl_ins/bbv v::bbv-ctx) (set! (-> |#!bigloo_wallow| o ctx) v))
(define-inline (rtl_ins/bbv-in::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o in))
(define-inline (rtl_ins/bbv-in-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o in) v))
(define-inline (rtl_ins/bbv-out::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o out))
(define-inline (rtl_ins/bbv-out-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o out) v))
(define-inline (rtl_ins/bbv-def::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o def))
(define-inline (rtl_ins/bbv-def-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o def) v))
(define-inline (rtl_ins/bbv-args::pair-nil o::rtl_ins/bbv) (-> |#!bigloo_wallow| o args))
(define-inline (rtl_ins/bbv-args-set! o::rtl_ins/bbv v::pair-nil) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (rtl_ins/bbv-fun::rtl_fun o::rtl_ins/bbv) (-> |#!bigloo_wallow| o fun))
(define-inline (rtl_ins/bbv-fun-set! o::rtl_ins/bbv v::rtl_fun) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (rtl_ins/bbv-dest::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o dest))
(define-inline (rtl_ins/bbv-dest-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o dest) v))
(define-inline (rtl_ins/bbv-%spill::pair-nil o::rtl_ins/bbv) (-> |#!bigloo_wallow| o %spill))
(define-inline (rtl_ins/bbv-%spill-set! o::rtl_ins/bbv v::pair-nil) (set! (-> |#!bigloo_wallow| o %spill) v))
(define-inline (rtl_ins/bbv-loc::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o loc))
(define-inline (rtl_ins/bbv-loc-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; blockV
(define-inline (make-blockV::blockV label1255::int preds1256::pair-nil succs1257::pair-nil first1258::pair-nil versions1259::pair-nil generic1260::obj %mark1261::long merge1262::obj) (instantiate::blockV (label label1255) (preds preds1256) (succs succs1257) (first first1258) (versions versions1259) (generic generic1260) (%mark %mark1261) (merge merge1262)))
(define-inline (blockV?::bool obj::obj) ((@ isa? __object) obj (@ blockV saw_bbv-types)))
(define (blockV-nil::blockV) (class-nil (@ blockV saw_bbv-types)))
(define-inline (blockV-merge::obj o::blockV) (-> |#!bigloo_wallow| o merge))
(define-inline (blockV-merge-set! o::blockV v::obj) (set! (-> |#!bigloo_wallow| o merge) v))
(define-inline (blockV-%mark::long o::blockV) (-> |#!bigloo_wallow| o %mark))
(define-inline (blockV-%mark-set! o::blockV v::long) (set! (-> |#!bigloo_wallow| o %mark) v))
(define-inline (blockV-generic::obj o::blockV) (-> |#!bigloo_wallow| o generic))
(define-inline (blockV-generic-set! o::blockV v::obj) (set! (-> |#!bigloo_wallow| o generic) v))
(define-inline (blockV-versions::pair-nil o::blockV) (-> |#!bigloo_wallow| o versions))
(define-inline (blockV-versions-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o versions) v))
(define-inline (blockV-first::pair-nil o::blockV) (-> |#!bigloo_wallow| o first))
(define-inline (blockV-first-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o first) v))
(define-inline (blockV-succs::pair-nil o::blockV) (-> |#!bigloo_wallow| o succs))
(define-inline (blockV-succs-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o succs) v))
(define-inline (blockV-preds::pair-nil o::blockV) (-> |#!bigloo_wallow| o preds))
(define-inline (blockV-preds-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o preds) v))
(define-inline (blockV-label::int o::blockV) (-> |#!bigloo_wallow| o label))
(define-inline (blockV-label-set! o::blockV v::int) (set! (-> |#!bigloo_wallow| o label) v))

;; blockS
(define-inline (make-blockS::blockS label1239::int preds1240::pair-nil succs1241::pair-nil first1242::pair-nil %mark1243::long %hash1244::obj %blacklist1245::obj ctx1246::bbv-ctx parent1247::blockV gccnt1248::long gcmark1249::long mblock1250::obj creator1251::obj merges1252::pair-nil asleep1253::bool) (instantiate::blockS (label label1239) (preds preds1240) (succs succs1241) (first first1242) (%mark %mark1243) (%hash %hash1244) (%blacklist %blacklist1245) (ctx ctx1246) (parent parent1247) (gccnt gccnt1248) (gcmark gcmark1249) (mblock mblock1250) (creator creator1251) (merges merges1252) (asleep asleep1253)))
(define-inline (blockS?::bool obj::obj) ((@ isa? __object) obj (@ blockS saw_bbv-types)))
(define (blockS-nil::blockS) (class-nil (@ blockS saw_bbv-types)))
(define-inline (blockS-asleep::bool o::blockS) (-> |#!bigloo_wallow| o asleep))
(define-inline (blockS-asleep-set! o::blockS v::bool) (set! (-> |#!bigloo_wallow| o asleep) v))
(define-inline (blockS-merges::pair-nil o::blockS) (-> |#!bigloo_wallow| o merges))
(define-inline (blockS-merges-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o merges) v))
(define-inline (blockS-creator::obj o::blockS) (-> |#!bigloo_wallow| o creator))
(define-inline (blockS-creator-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o creator) v))
(define-inline (blockS-mblock::obj o::blockS) (-> |#!bigloo_wallow| o mblock))
(define-inline (blockS-mblock-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o mblock) v))
(define-inline (blockS-gcmark::long o::blockS) (-> |#!bigloo_wallow| o gcmark))
(define-inline (blockS-gcmark-set! o::blockS v::long) (set! (-> |#!bigloo_wallow| o gcmark) v))
(define-inline (blockS-gccnt::long o::blockS) (-> |#!bigloo_wallow| o gccnt))
(define-inline (blockS-gccnt-set! o::blockS v::long) (set! (-> |#!bigloo_wallow| o gccnt) v))
(define-inline (blockS-parent::blockV o::blockS) (-> |#!bigloo_wallow| o parent))
(define-inline (blockS-parent-set! o::blockS v::blockV) (set! (-> |#!bigloo_wallow| o parent) v))
(define-inline (blockS-ctx::bbv-ctx o::blockS) (-> |#!bigloo_wallow| o ctx))
(define-inline (blockS-ctx-set! o::blockS v::bbv-ctx) (set! (-> |#!bigloo_wallow| o ctx) v))
(define-inline (blockS-%blacklist::obj o::blockS) (-> |#!bigloo_wallow| o %blacklist))
(define-inline (blockS-%blacklist-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o %blacklist) v))
(define-inline (blockS-%hash::obj o::blockS) (-> |#!bigloo_wallow| o %hash))
(define-inline (blockS-%hash-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o %hash) v))
(define-inline (blockS-%mark::long o::blockS) (-> |#!bigloo_wallow| o %mark))
(define-inline (blockS-%mark-set! o::blockS v::long) (set! (-> |#!bigloo_wallow| o %mark) v))
(define-inline (blockS-first::pair-nil o::blockS) (-> |#!bigloo_wallow| o first))
(define-inline (blockS-first-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o first) v))
(define-inline (blockS-succs::pair-nil o::blockS) (-> |#!bigloo_wallow| o succs))
(define-inline (blockS-succs-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o succs) v))
(define-inline (blockS-preds::pair-nil o::blockS) (-> |#!bigloo_wallow| o preds))
(define-inline (blockS-preds-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o preds) v))
(define-inline (blockS-label::int o::blockS) (-> |#!bigloo_wallow| o label))
(define-inline (blockS-label-set! o::blockS v::int) (set! (-> |#!bigloo_wallow| o label) v))

;; bbv-queue
(define-inline (make-bbv-queue::bbv-queue blocks1236::pair-nil last1237::pair-nil) (instantiate::bbv-queue (blocks blocks1236) (last last1237)))
(define-inline (bbv-queue?::bool obj::obj) ((@ isa? __object) obj (@ bbv-queue saw_bbv-types)))
(define (bbv-queue-nil::bbv-queue) (class-nil (@ bbv-queue saw_bbv-types)))
(define-inline (bbv-queue-last::pair-nil o::bbv-queue) (-> |#!bigloo_wallow| o last))
(define-inline (bbv-queue-last-set! o::bbv-queue v::pair-nil) (set! (-> |#!bigloo_wallow| o last) v))
(define-inline (bbv-queue-blocks::pair-nil o::bbv-queue) (-> |#!bigloo_wallow| o blocks))
(define-inline (bbv-queue-blocks-set! o::bbv-queue v::pair-nil) (set! (-> |#!bigloo_wallow| o blocks) v))

;; bbv-ctx
(define-inline (make-bbv-ctx::bbv-ctx id1233::long entries1234::pair-nil) (instantiate::bbv-ctx (id id1233) (entries entries1234)))
(define-inline (bbv-ctx?::bool obj::obj) ((@ isa? __object) obj (@ bbv-ctx saw_bbv-types)))
(define (bbv-ctx-nil::bbv-ctx) (class-nil (@ bbv-ctx saw_bbv-types)))
(define-inline (bbv-ctx-entries::pair-nil o::bbv-ctx) (-> |#!bigloo_wallow| o entries))
(define-inline (bbv-ctx-entries-set! o::bbv-ctx v::pair-nil) (set! (-> |#!bigloo_wallow| o entries) v))
(define-inline (bbv-ctx-id::long o::bbv-ctx) (-> |#!bigloo_wallow| o id))
(define-inline (bbv-ctx-id-set! o::bbv-ctx v::long) (set! (-> |#!bigloo_wallow| o id) v))

;; bbv-ctxentry
(define-inline (make-bbv-ctxentry::bbv-ctxentry reg1225::rtl_reg types1226::pair polarity1227::bool count1228::long value1229::obj aliases1230::pair-nil initval1231::obj) (instantiate::bbv-ctxentry (reg reg1225) (types types1226) (polarity polarity1227) (count count1228) (value value1229) (aliases aliases1230) (initval initval1231)))
(define-inline (bbv-ctxentry?::bool obj::obj) ((@ isa? __object) obj (@ bbv-ctxentry saw_bbv-types)))
(define (bbv-ctxentry-nil::bbv-ctxentry) (class-nil (@ bbv-ctxentry saw_bbv-types)))
(define-inline (bbv-ctxentry-initval::obj o::bbv-ctxentry) (-> |#!bigloo_wallow| o initval))
(define-inline (bbv-ctxentry-initval-set! o::bbv-ctxentry v::obj) (set! (-> |#!bigloo_wallow| o initval) v))
(define-inline (bbv-ctxentry-aliases::pair-nil o::bbv-ctxentry) (-> |#!bigloo_wallow| o aliases))
(define-inline (bbv-ctxentry-aliases-set! o::bbv-ctxentry v::pair-nil) (set! (-> |#!bigloo_wallow| o aliases) v))
(define-inline (bbv-ctxentry-value::obj o::bbv-ctxentry) (-> |#!bigloo_wallow| o value))
(define-inline (bbv-ctxentry-value-set! o::bbv-ctxentry v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (bbv-ctxentry-count::long o::bbv-ctxentry) (-> |#!bigloo_wallow| o count))
(define-inline (bbv-ctxentry-count-set! o::bbv-ctxentry v::long) (set! (-> |#!bigloo_wallow| o count) v))
(define-inline (bbv-ctxentry-polarity::bool o::bbv-ctxentry) (-> |#!bigloo_wallow| o polarity))
(define-inline (bbv-ctxentry-polarity-set! o::bbv-ctxentry v::bool) (set! (-> |#!bigloo_wallow| o polarity) v))
(define-inline (bbv-ctxentry-types::pair o::bbv-ctxentry) (-> |#!bigloo_wallow| o types))
(define-inline (bbv-ctxentry-types-set! o::bbv-ctxentry v::pair) (set! (-> |#!bigloo_wallow| o types) v))
(define-inline (bbv-ctxentry-reg::rtl_reg o::bbv-ctxentry) (-> |#!bigloo_wallow| o reg))
(define-inline (bbv-ctxentry-reg-set! o::bbv-ctxentry v::rtl_reg) (set! (-> |#!bigloo_wallow| o reg) v))
))
