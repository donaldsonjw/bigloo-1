;; ==========================================================
;; Class accessors
;; Bigloo (4.4c)
;; Inria -- Sophia Antipolis     Thu 07 Oct 2021 10:29:44 AM CEST 
;; (bigloo.new -classgen Integrate/iinfo.scm)
;; ==========================================================

;; The directives
(directives

;; svar/Iinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar/Iinfo::svar/Iinfo loc1227::obj f-mark1228::obj u-mark1229::obj kaptured?1230::bool celled?1231::bool xhdl1232::obj)
    (inline svar/Iinfo?::bool ::obj)
    (svar/Iinfo-nil::svar/Iinfo)
    (inline svar/Iinfo-xhdl::obj ::svar/Iinfo)
    (inline svar/Iinfo-xhdl-set! ::svar/Iinfo ::obj)
    (inline svar/Iinfo-celled?::bool ::svar/Iinfo)
    (inline svar/Iinfo-celled?-set! ::svar/Iinfo ::bool)
    (inline svar/Iinfo-kaptured?::bool ::svar/Iinfo)
    (inline svar/Iinfo-kaptured?-set! ::svar/Iinfo ::bool)
    (inline svar/Iinfo-u-mark::obj ::svar/Iinfo)
    (inline svar/Iinfo-u-mark-set! ::svar/Iinfo ::obj)
    (inline svar/Iinfo-f-mark::obj ::svar/Iinfo)
    (inline svar/Iinfo-f-mark-set! ::svar/Iinfo ::obj)
    (inline svar/Iinfo-loc::obj ::svar/Iinfo)
    (inline svar/Iinfo-loc-set! ::svar/Iinfo ::obj))))

;; sexit/Iinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit/Iinfo::sexit/Iinfo handler1220::obj detached?1221::bool f-mark1222::obj u-mark1223::obj kaptured?1224::bool celled?1225::bool)
    (inline sexit/Iinfo?::bool ::obj)
    (sexit/Iinfo-nil::sexit/Iinfo)
    (inline sexit/Iinfo-celled?::bool ::sexit/Iinfo)
    (inline sexit/Iinfo-celled?-set! ::sexit/Iinfo ::bool)
    (inline sexit/Iinfo-kaptured?::bool ::sexit/Iinfo)
    (inline sexit/Iinfo-kaptured?-set! ::sexit/Iinfo ::bool)
    (inline sexit/Iinfo-u-mark::obj ::sexit/Iinfo)
    (inline sexit/Iinfo-u-mark-set! ::sexit/Iinfo ::obj)
    (inline sexit/Iinfo-f-mark::obj ::sexit/Iinfo)
    (inline sexit/Iinfo-f-mark-set! ::sexit/Iinfo ::obj)
    (inline sexit/Iinfo-detached?::bool ::sexit/Iinfo)
    (inline sexit/Iinfo-detached?-set! ::sexit/Iinfo ::bool)
    (inline sexit/Iinfo-handler::obj ::sexit/Iinfo)
    (inline sexit/Iinfo-handler-set! ::sexit/Iinfo ::obj))))

;; sfun/Iinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sfun/Iinfo::sfun/Iinfo arity1176::long side-effect1177::obj predicate-of1178::obj stack-allocator1179::obj top?1180::bool the-closure1181::obj effect1182::obj failsafe1183::obj args-noescape1184::obj args-retescape1185::obj property1186::obj args1187::obj args-name1188::obj body1189::obj class1190::obj dsssl-keywords1191::obj loc1192::obj optionals1193::obj keys1194::obj the-closure-global1195::obj strength1196::symbol stackable1197::obj owner1198::obj free1199::obj bound1200::obj cfrom1201::obj cto1202::obj K1203::obj K*1204::obj U1205::obj Cn1206::obj Ct1207::obj kont1208::obj G?1209::bool forceG?1210::bool L1211::obj Led1212::obj istamp1213::obj global1214::obj kaptured1215::obj tail-coercion1216::obj xhdl?1217::bool xhdls1218::pair-nil)
    (inline sfun/Iinfo?::bool ::obj)
    (sfun/Iinfo-nil::sfun/Iinfo)
    (inline sfun/Iinfo-xhdls::pair-nil ::sfun/Iinfo)
    (inline sfun/Iinfo-xhdls-set! ::sfun/Iinfo ::pair-nil)
    (inline sfun/Iinfo-xhdl?::bool ::sfun/Iinfo)
    (inline sfun/Iinfo-xhdl?-set! ::sfun/Iinfo ::bool)
    (inline sfun/Iinfo-tail-coercion::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-tail-coercion-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-kaptured::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-kaptured-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-global::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-global-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-istamp::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-istamp-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-Led::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-Led-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-L::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-L-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-forceG?::bool ::sfun/Iinfo)
    (inline sfun/Iinfo-forceG?-set! ::sfun/Iinfo ::bool)
    (inline sfun/Iinfo-G?::bool ::sfun/Iinfo)
    (inline sfun/Iinfo-G?-set! ::sfun/Iinfo ::bool)
    (inline sfun/Iinfo-kont::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-kont-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-Ct::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-Ct-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-Cn::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-Cn-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-U::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-U-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-K*::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-K*-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-K::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-K-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-cto::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-cto-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-cfrom::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-cfrom-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-bound::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-bound-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-free::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-free-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-owner::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-owner-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-stackable::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-stackable-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-strength::symbol ::sfun/Iinfo)
    (inline sfun/Iinfo-strength-set! ::sfun/Iinfo ::symbol)
    (inline sfun/Iinfo-the-closure-global::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-the-closure-global-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-keys::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-optionals::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-loc::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-loc-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-dsssl-keywords::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-dsssl-keywords-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-class::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-class-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-body::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-body-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-args-name::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-args::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-args-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-property::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-property-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-args-retescape::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-args-retescape-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-args-noescape::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-args-noescape-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-failsafe::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-failsafe-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-effect::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-effect-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-the-closure::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-the-closure-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-top?::bool ::sfun/Iinfo)
    (inline sfun/Iinfo-top?-set! ::sfun/Iinfo ::bool)
    (inline sfun/Iinfo-stack-allocator::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-stack-allocator-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-predicate-of::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-predicate-of-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-side-effect::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-side-effect-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-arity::long ::sfun/Iinfo)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; svar/Iinfo
(define-inline (make-svar/Iinfo::svar/Iinfo loc1227::obj f-mark1228::obj u-mark1229::obj kaptured?1230::bool celled?1231::bool xhdl1232::obj) (instantiate::svar/Iinfo (loc loc1227) (f-mark f-mark1228) (u-mark u-mark1229) (kaptured? kaptured?1230) (celled? celled?1231) (xhdl xhdl1232)))
(define-inline (svar/Iinfo?::bool obj::obj) ((@ isa? __object) obj (@ svar/Iinfo integrate_info)))
(define (svar/Iinfo-nil::svar/Iinfo) (class-nil (@ svar/Iinfo integrate_info)))
(define-inline (svar/Iinfo-xhdl::obj o::svar/Iinfo) (-> |#!bigloo_wallow| o xhdl))
(define-inline (svar/Iinfo-xhdl-set! o::svar/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o xhdl) v))
(define-inline (svar/Iinfo-celled?::bool o::svar/Iinfo) (-> |#!bigloo_wallow| o celled?))
(define-inline (svar/Iinfo-celled?-set! o::svar/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o celled?) v))
(define-inline (svar/Iinfo-kaptured?::bool o::svar/Iinfo) (-> |#!bigloo_wallow| o kaptured?))
(define-inline (svar/Iinfo-kaptured?-set! o::svar/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o kaptured?) v))
(define-inline (svar/Iinfo-u-mark::obj o::svar/Iinfo) (-> |#!bigloo_wallow| o u-mark))
(define-inline (svar/Iinfo-u-mark-set! o::svar/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o u-mark) v))
(define-inline (svar/Iinfo-f-mark::obj o::svar/Iinfo) (-> |#!bigloo_wallow| o f-mark))
(define-inline (svar/Iinfo-f-mark-set! o::svar/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o f-mark) v))
(define-inline (svar/Iinfo-loc::obj o::svar/Iinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (svar/Iinfo-loc-set! o::svar/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sexit/Iinfo
(define-inline (make-sexit/Iinfo::sexit/Iinfo handler1220::obj detached?1221::bool f-mark1222::obj u-mark1223::obj kaptured?1224::bool celled?1225::bool) (instantiate::sexit/Iinfo (handler handler1220) (detached? detached?1221) (f-mark f-mark1222) (u-mark u-mark1223) (kaptured? kaptured?1224) (celled? celled?1225)))
(define-inline (sexit/Iinfo?::bool obj::obj) ((@ isa? __object) obj (@ sexit/Iinfo integrate_info)))
(define (sexit/Iinfo-nil::sexit/Iinfo) (class-nil (@ sexit/Iinfo integrate_info)))
(define-inline (sexit/Iinfo-celled?::bool o::sexit/Iinfo) (-> |#!bigloo_wallow| o celled?))
(define-inline (sexit/Iinfo-celled?-set! o::sexit/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o celled?) v))
(define-inline (sexit/Iinfo-kaptured?::bool o::sexit/Iinfo) (-> |#!bigloo_wallow| o kaptured?))
(define-inline (sexit/Iinfo-kaptured?-set! o::sexit/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o kaptured?) v))
(define-inline (sexit/Iinfo-u-mark::obj o::sexit/Iinfo) (-> |#!bigloo_wallow| o u-mark))
(define-inline (sexit/Iinfo-u-mark-set! o::sexit/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o u-mark) v))
(define-inline (sexit/Iinfo-f-mark::obj o::sexit/Iinfo) (-> |#!bigloo_wallow| o f-mark))
(define-inline (sexit/Iinfo-f-mark-set! o::sexit/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o f-mark) v))
(define-inline (sexit/Iinfo-detached?::bool o::sexit/Iinfo) (-> |#!bigloo_wallow| o detached?))
(define-inline (sexit/Iinfo-detached?-set! o::sexit/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o detached?) v))
(define-inline (sexit/Iinfo-handler::obj o::sexit/Iinfo) (-> |#!bigloo_wallow| o handler))
(define-inline (sexit/Iinfo-handler-set! o::sexit/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o handler) v))

;; sfun/Iinfo
(define-inline (make-sfun/Iinfo::sfun/Iinfo arity1176::long side-effect1177::obj predicate-of1178::obj stack-allocator1179::obj top?1180::bool the-closure1181::obj effect1182::obj failsafe1183::obj args-noescape1184::obj args-retescape1185::obj property1186::obj args1187::obj args-name1188::obj body1189::obj class1190::obj dsssl-keywords1191::obj loc1192::obj optionals1193::obj keys1194::obj the-closure-global1195::obj strength1196::symbol stackable1197::obj owner1198::obj free1199::obj bound1200::obj cfrom1201::obj cto1202::obj K1203::obj K*1204::obj U1205::obj Cn1206::obj Ct1207::obj kont1208::obj G?1209::bool forceG?1210::bool L1211::obj Led1212::obj istamp1213::obj global1214::obj kaptured1215::obj tail-coercion1216::obj xhdl?1217::bool xhdls1218::pair-nil) (instantiate::sfun/Iinfo (arity arity1176) (side-effect side-effect1177) (predicate-of predicate-of1178) (stack-allocator stack-allocator1179) (top? top?1180) (the-closure the-closure1181) (effect effect1182) (failsafe failsafe1183) (args-noescape args-noescape1184) (args-retescape args-retescape1185) (property property1186) (args args1187) (args-name args-name1188) (body body1189) (class class1190) (dsssl-keywords dsssl-keywords1191) (loc loc1192) (optionals optionals1193) (keys keys1194) (the-closure-global the-closure-global1195) (strength strength1196) (stackable stackable1197) (owner owner1198) (free free1199) (bound bound1200) (cfrom cfrom1201) (cto cto1202) (K K1203) (K* K*1204) (U U1205) (Cn Cn1206) (Ct Ct1207) (kont kont1208) (G? G?1209) (forceG? forceG?1210) (L L1211) (Led Led1212) (istamp istamp1213) (global global1214) (kaptured kaptured1215) (tail-coercion tail-coercion1216) (xhdl? xhdl?1217) (xhdls xhdls1218)))
(define-inline (sfun/Iinfo?::bool obj::obj) ((@ isa? __object) obj (@ sfun/Iinfo integrate_info)))
(define (sfun/Iinfo-nil::sfun/Iinfo) (class-nil (@ sfun/Iinfo integrate_info)))
(define-inline (sfun/Iinfo-xhdls::pair-nil o::sfun/Iinfo) (-> |#!bigloo_wallow| o xhdls))
(define-inline (sfun/Iinfo-xhdls-set! o::sfun/Iinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o xhdls) v))
(define-inline (sfun/Iinfo-xhdl?::bool o::sfun/Iinfo) (-> |#!bigloo_wallow| o xhdl?))
(define-inline (sfun/Iinfo-xhdl?-set! o::sfun/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o xhdl?) v))
(define-inline (sfun/Iinfo-tail-coercion::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o tail-coercion))
(define-inline (sfun/Iinfo-tail-coercion-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o tail-coercion) v))
(define-inline (sfun/Iinfo-kaptured::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o kaptured))
(define-inline (sfun/Iinfo-kaptured-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o kaptured) v))
(define-inline (sfun/Iinfo-global::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o global))
(define-inline (sfun/Iinfo-global-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o global) v))
(define-inline (sfun/Iinfo-istamp::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o istamp))
(define-inline (sfun/Iinfo-istamp-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o istamp) v))
(define-inline (sfun/Iinfo-Led::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o Led))
(define-inline (sfun/Iinfo-Led-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o Led) v))
(define-inline (sfun/Iinfo-L::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o L))
(define-inline (sfun/Iinfo-L-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o L) v))
(define-inline (sfun/Iinfo-forceG?::bool o::sfun/Iinfo) (-> |#!bigloo_wallow| o forceG?))
(define-inline (sfun/Iinfo-forceG?-set! o::sfun/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o forceG?) v))
(define-inline (sfun/Iinfo-G?::bool o::sfun/Iinfo) (-> |#!bigloo_wallow| o G?))
(define-inline (sfun/Iinfo-G?-set! o::sfun/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o G?) v))
(define-inline (sfun/Iinfo-kont::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o kont))
(define-inline (sfun/Iinfo-kont-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o kont) v))
(define-inline (sfun/Iinfo-Ct::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o Ct))
(define-inline (sfun/Iinfo-Ct-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o Ct) v))
(define-inline (sfun/Iinfo-Cn::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o Cn))
(define-inline (sfun/Iinfo-Cn-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o Cn) v))
(define-inline (sfun/Iinfo-U::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o U))
(define-inline (sfun/Iinfo-U-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o U) v))
(define-inline (sfun/Iinfo-K*::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o K*))
(define-inline (sfun/Iinfo-K*-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o K*) v))
(define-inline (sfun/Iinfo-K::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o K))
(define-inline (sfun/Iinfo-K-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o K) v))
(define-inline (sfun/Iinfo-cto::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o cto))
(define-inline (sfun/Iinfo-cto-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o cto) v))
(define-inline (sfun/Iinfo-cfrom::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o cfrom))
(define-inline (sfun/Iinfo-cfrom-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o cfrom) v))
(define-inline (sfun/Iinfo-bound::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o bound))
(define-inline (sfun/Iinfo-bound-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o bound) v))
(define-inline (sfun/Iinfo-free::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o free))
(define-inline (sfun/Iinfo-free-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o free) v))
(define-inline (sfun/Iinfo-owner::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o owner))
(define-inline (sfun/Iinfo-owner-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o owner) v))
(define-inline (sfun/Iinfo-stackable::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o stackable))
(define-inline (sfun/Iinfo-stackable-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o stackable) v))
(define-inline (sfun/Iinfo-strength::symbol o::sfun/Iinfo) (-> |#!bigloo_wallow| o strength))
(define-inline (sfun/Iinfo-strength-set! o::sfun/Iinfo v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (sfun/Iinfo-the-closure-global::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o the-closure-global))
(define-inline (sfun/Iinfo-the-closure-global-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure-global) v))
(define-inline (sfun/Iinfo-keys::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o keys))
(define-inline (sfun/Iinfo-keys-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o keys) v))
(define-inline (sfun/Iinfo-optionals::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o optionals))
(define-inline (sfun/Iinfo-optionals-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o optionals) v))
(define-inline (sfun/Iinfo-loc::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (sfun/Iinfo-loc-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (sfun/Iinfo-dsssl-keywords::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (sfun/Iinfo-dsssl-keywords-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (sfun/Iinfo-class::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o class))
(define-inline (sfun/Iinfo-class-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (sfun/Iinfo-body::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o body))
(define-inline (sfun/Iinfo-body-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sfun/Iinfo-args-name::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o args-name))
(define-inline (sfun/Iinfo-args-name-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o args-name) v))
(define-inline (sfun/Iinfo-args::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o args))
(define-inline (sfun/Iinfo-args-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (sfun/Iinfo-property::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o property))
(define-inline (sfun/Iinfo-property-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (sfun/Iinfo-args-retescape::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o args-retescape))
(define-inline (sfun/Iinfo-args-retescape-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o args-retescape) v))
(define-inline (sfun/Iinfo-args-noescape::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o args-noescape))
(define-inline (sfun/Iinfo-args-noescape-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o args-noescape) v))
(define-inline (sfun/Iinfo-failsafe::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o failsafe))
(define-inline (sfun/Iinfo-failsafe-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o failsafe) v))
(define-inline (sfun/Iinfo-effect::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (sfun/Iinfo-effect-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (sfun/Iinfo-the-closure::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (sfun/Iinfo-the-closure-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (sfun/Iinfo-top?::bool o::sfun/Iinfo) (-> |#!bigloo_wallow| o top?))
(define-inline (sfun/Iinfo-top?-set! o::sfun/Iinfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (sfun/Iinfo-stack-allocator::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (sfun/Iinfo-stack-allocator-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (sfun/Iinfo-predicate-of::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (sfun/Iinfo-predicate-of-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (sfun/Iinfo-side-effect::obj o::sfun/Iinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sfun/Iinfo-side-effect-set! o::sfun/Iinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sfun/Iinfo-arity::long o::sfun/Iinfo) (-> |#!bigloo_wallow| o arity))
(define-inline (sfun/Iinfo-arity-set! o::sfun/Iinfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))
))
